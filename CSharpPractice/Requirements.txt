We need an electronic grade book to read the scores of an individual student 
and then compute some simple statistics from the scores.

The grades are entered as floating point numbers (float) from 0 to 100, and the statistics should show us 
the highest grade, the lowest grade, and the average grade.

GradeBook class - 

Class members define:
1. State
2. Behavior

GradeBook State
1. The grades for a user

GradeBook Behavior
1. Add a new grade
2. Calculate statistics

----Classes & Objects----
create objects with class (like a cookie cutter)
Objects are allocated into memory
new keyword

----Constructors---
a method that helps create an instance of class, initialization of object
can set default values
ctor - shortcut for creating a constructor

----Classes and Variables----
Class is a blueprint for creating objects.
You can use a class to define the type of variable.
Variable is a pointer that points to a specific object.

----Reference Types----
Classes are reference types
Variables hold a pointer value to that object in memory.
GradeBook book1 = new GradeBook(); where the GradeBook lives in memory
You can have multiple variables pointing to same place.
GradeBook book2 = book1; Copies it.

----Access Modifiers----
public keyword- encapsulation, closing or hiding details in classes and objects
AddGrade method encapsulates how a grade is stored in gradebook.
cannot access grades outside of class because of keyword, public
private keyword - cannot access outside class
if you don't explicitly tell C# an access modifier, default is private.
Fields and data are typically private.

----Statics----
use static members of a class without creating an instance
public static float MinimumGrade = 0;
public static float MaximumGrade = 100;
Instead, you reference the field or type name and then the name of the field or method

Console.WriteLine is an example of a static class. You don't have to create an instance of
console to use members of it.

----Statistics----
Highest grade
Lowest grade
Average grade
Create a class called GradeStatistics which will encapsulate High, low and avg grades
Create a method in GradeBook that will Compute Statistics and return a GradeStatistics object type.

----Computation----
Create GradeStatistics to store properties HighestGrade, AverageGrade, and LowestGrade
Create ComputeStatistics method in Gradebook to calculate stats.
Create constructor in GradeStatistics to initialize objects with HighestGrade = 0 and LowestGrade = Max

----Assemblies----
csc.exe - used to compile c# files and creates an assembly myapp.exe
Assemblies are .exe or .dll files - contain metadata about all types inside
Global Assembly Cache
A central location to store assemblies for a machine

---Browsing Assemblies----
Features around creating and using other assemblies
bin\Debug directory - AppName.exe
What rules are used to pick that name and ext.?
Project > Properties
DLL (Class Library) Dynamic Link Library
used by other classes and apps not stand-alone app
MSCoreLib.dll - implied, not listed in References
Math class
examples of other classes from .Net framework
place cursor on class name and press F12 source code
at top VS will tell you what Assembly it is
References > all assemblies that project references
View > Object Browser look through all namespaces and types

----Referencing Assemblies----
Right-click References > choose assemblies you need to reference
System.Speech cool speech synthesizer!

----Unit Testing----
Write code to test code automated tests
Brute force information to get started
Unit Test Project - for classes to verify they are behaving correctly.
Attributes in C# - a piece of data that is associated with class or members [TestMethod]
Example: Assert.AreEqual(3, 4) will fail because 3 and 4 are not equal.
